{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","selectedPart","setSelectedPart","useState","navbarStyle","backgroundColor","customColors","navbarColor","mode","color","fontColor","React","createElement","className","style","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onChange","e","target","value","width","handleColorChange","document","body","height","border","onClick","toggleMode","role","htmlFor","TextForm","copySuccess","setCopySuccess","text","setText","wordCount","trim","split","filter","word","length","textFormStyle","textboxColor","Fragment","heading","event","rows","disabled","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleExtraSpaces","join","handleCopyClick","navigator","clipboard","writeText","then","setTimeout","catch","err","handleClearClick","defaultProps","aboutText","Alert","alert","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","setCustomColors","message","part","prevColors","[object Object]","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9a9790f2.chunk.js","sourcesContent":["\r\n// import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\n// export default function Navbar(props) {\r\n//   return (\r\n//     <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n//   <div className=\"container-fluid\">\r\n//     <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n//     <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n//       <span className=\"navbar-toggler-icon\"></span>\r\n//     </button>\r\n//     <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n//       <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n//         <li className=\"nav-item\">\r\n//           <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n//         </li>\r\n//         <li className=\"nav-item\">\r\n//           <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n//         </li>\r\n//       </ul>\r\n//       {/* <form className=\"d-flex\" role=\"search\">\r\n//         <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n//         <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n//       </form> */}\r\n//       <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} mx-4`}>\r\n//         <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"switchCheckDefault\"/>\r\n//         <label className=\"form-check-label\" htmlFor=\"switchCheckDefault\">Enable Darkmode</label>\r\n//       </div>\r\n//     </div>\r\n//   </div>\r\n// </nav>\r\n//   )\r\n// }\r\n\r\n// Navbar.propTypes={title: PropTypes.string.isRequired,\r\n//                 aboutText: PropTypes.string.isRequired\r\n// };\r\n\r\n// Navbar.defaultProps={title: 'Set Title Here',\r\n//     aboutText: 'About'\r\n// };\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\n// export default function Navbar(props) {\r\n//   const [selectedPart, setSelectedPart] = useState('');\r\n\r\n//   const handleSelectChange = (e) => {\r\n//     setSelectedPart(e.target.value);\r\n//   };\r\n\r\n//   const handleColorInputChange = (e) => {\r\n//     if (selectedPart) {\r\n//       props.handleColorChange(selectedPart, e.target.value);\r\n//       if (selectedPart === 'backgroundColor') {\r\n//         document.body.style.backgroundColor = e.target.value;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     // <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} style={{ backgroundColor: props.customColors.navbarColor }}>\r\n//     <nav className={`navbar navbar-expand-lg navbar-${props.mode}`} \r\n//      style={{ backgroundColor: props.mode === 'dark' ? '' : props.customColors.navbarColor }}>\r\n\r\n//       <div className=\"container-fluid\">\r\n//         <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n//         <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n//           <span className=\"navbar-toggler-icon\"></span>\r\n//         </button>\r\n//         <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n//           <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n//             <li className=\"nav-item\">\r\n//               <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n//             </li>\r\n//             <li className=\"nav-item\">\r\n//               <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n//             </li>\r\n//           </ul>\r\n\r\n//           {/* Custom Color Selector */}\r\n//           <div className=\"d-flex align-items-center\">\r\n//             <select className=\"form-select mx-2\" onChange={handleSelectChange} style={{ width: \"180px\" }}>\r\n//               <option value=\"\">Choose Custom Color</option>\r\n//               <option value=\"backgroundColor\">Background Color</option>\r\n//               <option value=\"navbarColor\">Navbar Color</option>\r\n//               <option value=\"textboxColor\">Textbox Color</option>\r\n//               <option value=\"fontColor\">Font Color</option>\r\n//             </select>\r\n\r\n//             {selectedPart && (\r\n//               <input\r\n//                 type=\"color\"\r\n//                 onChange={handleColorInputChange}\r\n//                 style={{ height: \"38px\", width: \"50px\", border: \"none\" }}\r\n//               />\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* Dark Mode Toggle */}\r\n//           <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} mx-4`}>\r\n//             <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"switchCheckDefault\" />\r\n//             <label className=\"form-check-label\" htmlFor=\"switchCheckDefault\">Enable Darkmode</label>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </nav>\r\n//   )\r\n// }\r\n\r\n// Navbar.propTypes = {\r\n//   title: PropTypes.string.isRequired,\r\n//   aboutText: PropTypes.string.isRequired\r\n// };\r\n\r\n// Navbar.defaultProps = {\r\n//   title: 'Set Title Here',\r\n//   aboutText: 'About'\r\n// };\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  const [selectedPart, setSelectedPart] = useState('');\r\n\r\n  const handleSelectChange = (e) => {\r\n    setSelectedPart(e.target.value);\r\n  };\r\n\r\n  const handleColorInputChange = (e) => {\r\n    if (selectedPart) {\r\n      props.handleColorChange(selectedPart, e.target.value);\r\n      if (selectedPart === 'backgroundColor') {\r\n        document.body.style.backgroundColor = e.target.value;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Dynamic styles for navbar\r\n  const navbarStyle = {\r\n    backgroundColor: props.customColors.navbarColor || (props.mode === 'dark' ? '#343a40' : 'white'),\r\n    color: props.customColors.fontColor || (props.mode === 'dark' ? 'white' : 'black'),\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg\" style={navbarStyle}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\" style={{ color: navbarStyle.color }}>\r\n          {props.title}\r\n        </a>\r\n        {/* <Link className=\"navbar-brand\" to=\"#\" style={{ color: navbarStyle.color }}>\r\n          {props.title}\r\n        </Link> */}\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\" style={{ color: navbarStyle.color }}>\r\n                Home\r\n              </a>\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"#\" style={{ color: navbarStyle.color }}>\r\n                Home\r\n              </Link> */}\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\" style={{ color: navbarStyle.color }}>\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n\r\n          {/* Custom Color Selector */}\r\n          <div className=\"d-flex align-items-center\">\r\n            <select className=\"form-select mx-2\" onChange={handleSelectChange} style={{ width: \"210px\" }}>\r\n              <option value=\"\">Customize Website</option>\r\n              <option value=\"backgroundColor\">Background Color</option>\r\n              <option value=\"navbarColor\">Navbar Color</option>\r\n              <option value=\"textboxColor\">Textbox Color</option>\r\n              <option value=\"fontColor\">Font Color</option>\r\n            </select>\r\n\r\n            {selectedPart && (\r\n              <input\r\n                type=\"color\"\r\n                onChange={handleColorInputChange}\r\n                style={{ height: \"38px\", width: \"50px\", border: \"none\" }}\r\n              />\r\n            )}\r\n          </div>\r\n\r\n          {/* Dark Mode Toggle */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} mx-4`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"switchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"switchCheckDefault\">Enable Darkmode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set Title Here',\r\n  aboutText: 'About'\r\n};\r\n\r\n","// import React, { useState } from \"react\";\r\n\r\n// export default function TextForm(props) {\r\n\r\n//   const [copySuccess, setCopySuccess] = useState(\"\");\r\n//   const handleUpClick = () => {\r\n//     // console.log(\"Uppercase was clicked : \"+text)\r\n//     let newText = text.toUpperCase();\r\n//     setText(newText);\r\n//     props.showAlert(\"Converted to Uppercase !!\",\"success\")\r\n//   };\r\n\r\n//   const handleLoClick = () => {\r\n//     // console.log(\"Lowercase was clicked : \"+text)\r\n//     let newText = text.toLowerCase();\r\n//     setText(newText);\r\n//     props.showAlert(\"Converted to Lowercase !!\",\"success\")\r\n//   };\r\n\r\n//   const handleClearClick = () => {\r\n//     // console.log(\"Clear text was clicked : \"+text)\r\n//     let newText = \"\";\r\n//     setText(newText);\r\n//     props.showAlert(\"Text has been cleared !!\",\"success\")\r\n//   };\r\n\r\n//   const handleExtraSpaces=() => {\r\n//     //// console.log(\"Extra spaces were removed. \")\r\n//     let newText=text.split(/[ ]+/)\r\n//     setText(newText.join(\" \"))\r\n//     props.showAlert(\"Extra spaces has been removed !!\",\"success\")\r\n//   }\r\n\r\n//   const handleCopyClick = () => {\r\n//     // console.log(\"Copy text was clicked : \"+text)\r\n//     navigator.clipboard.writeText(text)\r\n//     .then(() => {\r\n//       setTimeout(() => setCopySuccess(\"\"), 3500); // Clear message after 2 seconds\r\n//     })\r\n//     .catch((err) => {\r\n//       setTimeout(() => setCopySuccess(\"\"), 3500);\r\n//     });\r\n//     props.showAlert(\"Copied to clipboard !!\",\"success\")\r\n//   };\r\n\r\n//   const handleOnChange = (event) => {\r\n//     // console.log(\"On Change !!\")\r\n//     setText(event.target.value);\r\n//   };\r\n\r\n//   const [text, setText] = useState(\"\");\r\n//   const wordCount = text.trim().split(/\\s+/).filter((word) => word !== \"\").length;\r\n//   return (\r\n//     <>\r\n//       <div className=\"container\" style={{color:props.mode==='dark'?'white':'#02022b'}}>\r\n//         <h1>{props.heading}</h1>\r\n//         <div className=\"mb-3\">\r\n//           <textarea\r\n//             className=\"form-control\"\r\n//             value={text}\r\n//             onChange={handleOnChange}\r\n//             id=\"myBox\"\r\n//             rows=\"8\"\r\n//             style={{backgroundColor:props.mode==='dark'?'gray':'white',color:props.mode==='dark'?'white':'#02022b'}}\r\n//           />\r\n//         </div>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n//           Convert to Uppercase\r\n//         </button>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n//           Convert to Lowercase\r\n//         </button>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n//           Remove Extra Spaces\r\n//         </button>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>\r\n//           Copy Text\r\n//         </button>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n//           Clear Text\r\n//         </button>\r\n//         {copySuccess && <div className=\"alert alert-success mt-3\">{copySuccess}</div>}\r\n//       </div>\r\n//       <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#02022b'}}>\r\n//         <h2>Text Summary</h2>\r\n//         <p>{wordCount} words and {text.length} characters</p>\r\n//         <p>{0.008 * wordCount} Minutes read</p>\r\n\r\n//         <h2>Preview of your text :</h2>\r\n//         <p>{text.length>0?text:\"Enter text in the textbox to preview it here\"}</p>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// import React, { useState } from \"react\";\r\n\r\n// export default function TextForm(props) {\r\n//   const [copySuccess, setCopySuccess] = useState(\"\");\r\n//   const [text, setText] = useState(\"\");\r\n\r\n//   const handleUpClick = () => {\r\n//     let newText = text.toUpperCase();\r\n//     setText(newText);\r\n//     props.showAlert(\"Converted to Uppercase !!\", \"success\");\r\n//   };\r\n\r\n//   const handleLoClick = () => {\r\n//     let newText = text.toLowerCase();\r\n//     setText(newText);\r\n//     props.showAlert(\"Converted to Lowercase !!\", \"success\");\r\n//   };\r\n\r\n//   const handleClearClick = () => {\r\n//     let newText = \"\";\r\n//     setText(newText);\r\n//     props.showAlert(\"Text has been cleared !!\", \"success\");\r\n//   };\r\n\r\n//   const handleExtraSpaces = () => {\r\n//     let newText = text.split(/[ ]+/);\r\n//     setText(newText.join(\" \"));\r\n//     props.showAlert(\"Extra spaces have been removed !!\", \"success\");\r\n//   };\r\n\r\n//   const handleCopyClick = () => {\r\n//     navigator.clipboard.writeText(text)\r\n//       .then(() => {\r\n//         setTimeout(() => setCopySuccess(\"\"), 3500);\r\n//       })\r\n//       .catch((err) => {\r\n//         setTimeout(() => setCopySuccess(\"\"), 3500);\r\n//       });\r\n//     props.showAlert(\"Copied to clipboard !!\", \"success\");\r\n//   };\r\n\r\n//   const handleOnChange = (event) => {\r\n//     setText(event.target.value);\r\n//   };\r\n\r\n//   const wordCount = text.trim().split(/\\s+/).filter((word) => word !== \"\").length;\r\n\r\n//   // Dynamically decide colors based on mode\r\n//   const textAreaStyle = {\r\n//     backgroundColor: props.mode === 'dark' ? '#333' : props.customColors.textboxColor,\r\n//     color: props.mode === 'dark' ? 'white' : props.customColors.fontColor,\r\n//   };\r\n\r\n//   const textColorStyle = {\r\n//     color: props.mode === 'dark' ? 'white' : props.customColors.fontColor,\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"container\" style={textColorStyle}>\r\n//         <h1>{props.heading}</h1>\r\n//         <div className=\"mb-3\">\r\n//           <textarea\r\n//             className=\"form-control\"\r\n//             value={text}\r\n//             onChange={handleOnChange}\r\n//             id=\"myBox\"\r\n//             rows=\"8\"\r\n//             style={textAreaStyle}\r\n//           />\r\n//         </div>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n//           Convert to Uppercase\r\n//         </button>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n//           Convert to Lowercase\r\n//         </button>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n//           Remove Extra Spaces\r\n//         </button>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>\r\n//           Copy Text\r\n//         </button>\r\n//         <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n//           Clear Text\r\n//         </button>\r\n//         {copySuccess && <div className=\"alert alert-success mt-3\">{copySuccess}</div>}\r\n//       </div>\r\n\r\n//       <div className=\"container my-3\" style={textColorStyle}>\r\n//         <h2>Text Summary</h2>\r\n//         <p>{wordCount} words and {text.length} characters</p>\r\n//         <p>{0.008 * wordCount} Minutes read</p>\r\n\r\n//         <h2>Preview of your text :</h2>\r\n//         <p>{text.length > 0 ? text : \"Enter text in the textbox to preview it here\"}</p>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [copySuccess, setCopySuccess] = useState(\"\");\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase !!\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase !!\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text has been cleared !!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces have been removed !!\", \"success\");\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    navigator.clipboard\r\n      .writeText(text)\r\n      .then(() => {\r\n        setTimeout(() => setCopySuccess(\"\"), 3500); // Clear message after 2 seconds\r\n      })\r\n      .catch((err) => {\r\n        setTimeout(() => setCopySuccess(\"\"), 3500);\r\n      });\r\n    props.showAlert(\"Copied to clipboard !!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  const wordCount = text\r\n    .trim()\r\n    .split(/\\s+/)\r\n    .filter((word) => word !== \"\").length;\r\n\r\n  // Dynamic styles for TextForm\r\n  const textFormStyle = {\r\n    backgroundColor:\r\n      props.customColors.textboxColor ||\r\n      (props.mode === \"dark\" ? \"gray\" : \"white\"),\r\n    color:\r\n      props.customColors.fontColor ||\r\n      (props.mode === \"dark\" ? \"white\" : \"#02022b\"),\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ color: textFormStyle.color }}>\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            style={{\r\n              backgroundColor: textFormStyle.backgroundColor,\r\n              color: textFormStyle.color,\r\n            }}\r\n          />\r\n        </div>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleCopyClick}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        {copySuccess && (\r\n          <div className=\"alert alert-success mt-3\">{copySuccess}</div>\r\n        )}\r\n      </div>\r\n      <div className=\"container my-3\" style={{ color: textFormStyle.color }}>\r\n        <h2>Text Summary</h2>\r\n        <p>\r\n          {wordCount} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * wordCount} Minutes read</p>\r\n\r\n        <h2>Preview of your text :</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Nothing to preview\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n      {\r\n        props.alert && \r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import { useState } from \"react\";\n// import \"./App.css\";\n// // import About from \"./components/About\";\n// import Navbar from \"./components/Navbar\";\n// import TextForm from \"./components/TextForm\";\n// import Alert from \"./components/Alert\";\n\n// function App() {\n//   const [mode,setMode]=useState('light'); //whether dark mode is enabled or not\n//   const [alert,setAlert]=useState(null);\n\n//   const showAlert=(message,type)=>{\n//     setAlert({\n//       msg: message,\n//       type: type\n//     })\n//     setTimeout(() => {\n//       setAlert(null)\n//     }, 2000);\n//   }\n//   const toggleMode=()=>{\n//     if(mode==='light')\n//     {\n//       setMode('dark')\n//       document.body.style.backgroundColor='#02022b'\n//       showAlert(\"Dark Mode has been enabled !!\",\"success\")\n//     }\n//     else\n//     {\n//       setMode('light')\n//       document.body.style.backgroundColor='white'\n//       showAlert(\"Light Mode has been enabled !!\",\"success\")\n//     }\n//   }\n//   return (\n//     <>\n//       <Navbar title=\"My App\" aboutText=\"About\" mode={mode\n//       } toggleMode={toggleMode} />\n//       <Alert alert={alert}/>\n//       <div className=\"container my-3\">\n//         <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n//         {/* <About/> */}\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\n// import About from \"./components/About\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const [customColors, setCustomColors] = useState({\n    backgroundColor: \"\",\n    navbarColor: \"\",\n    textboxColor: \"\",\n    fontColor: \"\",\n  });\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#02022b\";\n      showAlert(\"Dark Mode has been enabled !!\", \"success\");\n      // document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled !!\", \"success\");\n      // document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  const handleColorChange = (part, color) => {\n    setCustomColors((prevColors) => ({\n      ...prevColors,\n      [part]: color,\n    }));\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"TextUtils\"\n        aboutText=\"About\"\n        mode={mode}\n        toggleMode={toggleMode}\n        customColors={customColors}\n        handleColorChange={handleColorChange}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Routes> */}\n        {/* <Route exact path=\"/about\" element={<About />} /> */}\n        {/* <Route\n              exact path=\"/\"\n              element={\n                \n              }\n            />\n          </Routes> */}\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Try TextUtils - Analyze your text here\"\n          mode={mode}\n          customColors={customColors}\n        />\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}